<datalist id="user-datalist"> <!-- TODO: alphabetically sort ingredients -->
    <% for(let i = 0; i < user.brigade.length; i++){ %>
        <option id="user-datalist-<%= user.brigade[i].id %>" value="<%= user.brigade[i].username %>">
    <% } %>
</datalist>
<datalist id="ingredient-datalist">
    <% for(let i = 0; i < user.ingredients.length; i++){ %>
        <option id="ingredient-datalist-<%= user.ingredients[i].id %>" value="<%= user.ingredients[i].name %>">
    <% } %>

    <% for(let i = 0; i < user.recipes.length; i++){ %>
        <% let allowed = true %>
        <% if(locals.recipe){ if(recipe.id == user.recipes[i].id){ allowed = false } } %>
        <% if(allowed){ %><option id="recipe-datalist-<%= user.recipes[i].id %>" value="<%= user.recipes[i].name %> (recipe)"><% } %>
    <% } %>
</datalist>
<script>
    //TODO: Add max/min to num and file inputs
    let priceInput = document.getElementById('price');
    let profitMargin = document.getElementById('profit-margin');
    let profit = document.getElementById('profit');
    let foodInput = document.getElementById('food-input');
    let price = <% if(locals.recipe){ %><%= recipe.price.val %><% }else{ %>0<% } %>;
    let servings = <% if(locals.recipe){ %><%= recipe.serves %><% }else{ %>1<% } %>;
    let cost = <% if(locals.recipe){ %><%- JSON.stringify({...recipe.costs, ...{food: recipe.foodCost}}) %><% }else{ %>{food: 0, labor: 0, overhead: 0, misc: 0}<% } %>;
    let ids = <%= JSON.stringify(user.ingredients.map(i => i.id)) %>;
    let names = <%- JSON.stringify(user.ingredients.map(i => i.name)) %>;
    let prices = <%= JSON.stringify(user.ingredients.map(i => Math.round(100*i.price.val/(1 - i.wastage/100))/100)) %>;
    let units =  <%- JSON.stringify(user.ingredients.map(i => [i.price.units].concat(i.conversions.map(c => c.units)))) %>;
    let factors = <%= JSON.stringify(user.ingredients.map(i => [i.price.qt].concat(i.conversions.map(c => c.qt)))) %>;
    let recipeIds = <%= JSON.stringify(user.recipes.map(r => r.id)) %>;
    let recipeNames = <%- JSON.stringify(user.recipes.map(r => r.name + ' (recipe)')) %>;
    let recipePrices = <%- JSON.stringify(user.recipes.map(r => {return {...r.costs, ...{food: r.foodCost || 0}}})) %>;
    let recipeUnits =  <%- JSON.stringify(user.recipes.map(r => [r.price.units])) %>;
    let userIds = <%= JSON.stringify(user.brigade.map(u => u.id)) %>;
    let users = <%- JSON.stringify(user.brigade.map(u => u.username)) %>;

    preventDuplicates();

    function money(num){
        return num.toFloatFixed(2);
    }

    function changePrice(){
        let num = parseFloat(priceInput.value);
        price = isNaN(num) ? 0 : num;

        updateProfit(false, true);
    }

    function changePortionPrice(){
        let num = parseFloat($('#portion-price').val());
        let servings = parseFloat($('#serving-input').val());

        if(!isNaN(num)) price = isNaN(servings) ? num : servings * num;
        else price = 0;

        $('#price').attr('value', money(price));
        updateProfit(true);
    }

    function changeCost(val, key, notInput){
        if(key){
            if(notInput){
                cost[key] += money(val);
                document.getElementById(`${key}-input`).setAttribute('value', cost[key]);
            }else{
                let num = parseFloat(document.getElementById(val).value);
                cost[key] = isNaN(num) ? 0 : num;
            }
        }else{
            cost.food += money(val);
            foodInput.setAttribute('value', money(cost.food));
        }

        updateProfit();
    }

    function total(c){
        let sum = 0;

        for(key in c){
            sum += c[key];
        }

        return sum;
    }

    function updateProfit(portionCall, priceCall){
        let servingCost = $('#serving-cost-input');
        let totalCost = $('#total-cost-input');
        let portionPrice = $('#portion-price');
        let portionProfit = $('#portion-profit');

        let income = money(price - total(cost));
        let margin = price == 0 ? 0 : money(100*income/price);

        profit.value = income;
        profitMargin.value = margin;
        servingCost.attr('value', money(total(cost)/servings));
        totalCost.attr('value', money(total(cost)));
        if(!portionCall) portionPrice.val(money(price/servings));
        if(!priceCall) $('#price').val(money(price));
        portionProfit.attr('value', money(income/servings));

        if(income < 0){
            profit.style.color = 'coral';
            profitMargin.style.color = 'coral';
            $('#portion-profit').css('color', 'coral');
        }else if(income == 0){
            profit.style.color = 'inherit';
            profitMargin.style.color = 'inherit';
            $('#portion-profit').css('color', 'inherit');
        }else{
            profit.style.color = '#00E676';
            profitMargin.style.color = '#00E676';
            $('#portion-profit').css('color', '#00E676');
        }
    }

    function preventDuplicates(){
        let arrs = {
            user: JSON.parse(document.getElementById('viewer-input').value),
            recipe:  JSON.parse(document.getElementById('subrecipe-input').value),
            ingredient:  JSON.parse(document.getElementById('ingredient-input').value)
        }

        for(key in arrs){
            let arr = arrs[key];

            for(id of arr){
                document.getElementById(`${key}-datalist-${id}`).remove();
            }
        }
    }

    function addStep(){
        let stepList = document.getElementById('step-input');
        let stepContainer = document.getElementById('add-step-container');
        let addStepInput = document.getElementById('add-step-input');
        let step = addStepInput.value;
        let arr = JSON.parse(stepList.value);

        if(step != ''){
            arr.push(step);

            stepList.setAttribute('value', JSON.stringify(arr));

            let id = arr.length - 1;
            stepContainer.innerHTML += `
            <p id="step-${id}" class="flex-container step brigade">
                <span class="editable" id="step-span-${id}"
                    onclick="toggleArr(['step-span-${id}', 'remove-${id}'], ['step-span-edit-${id}', 'done-${id}'])"
                >${step}</span>
                <textarea id="step-span-edit-${id}" style="display: none; margin-bottom: 0; font-weight: 300; font-size: 17px">${step}</textarea>
                <i class="material-icons" id="remove-${id}" onclick="removeStep(${id})" style="cursor: pointer">close</i>
                <i class="material-icons" id="done-${id}" onclick="updateStep(${id})" style="cursor: pointer; color: #8C9EFF; display: none">done</i>
            </p>`;

            addStepInput.setAttribute('value', '');
        }
    }

    function removeStep(id){
        let stepList = document.getElementById('step-input');
        let arr = JSON.parse(stepList.value);
        arr.splice(id, 1);

        stepList.setAttribute('value', JSON.stringify(arr));

        document.getElementById('step-' + id).remove();
    }

    function updateStep(id){
        let stepList = document.getElementById('step-input');
        let arr = JSON.parse(stepList.value);
        let txt = $(`#step-span-edit-${id}`).val();

        arr[id] = txt;
        stepList.setAttribute('value', JSON.stringify(arr));
        $(`#step-span-${id}`).html(txt);
        toggleArr([`step-span-${id}`, `remove-${id}`], [`step-span-edit-${id}`, `done-${id}`])
    }

    function getUnits(){
        let ingredientInfo = document.querySelectorAll('#add-ingredient-input input, #add-ingredient-input select');
        let name = ingredientInfo[0].value;
        let select = ingredientInfo[2];
        let isRecipe = false;
        let i = names.indexOf(names.find(n => clean(n) == clean(name)));
        if(i == -1){
            i = recipeNames.indexOf(recipeNames.find(rn => clean(rn) == clean(name)));
            isRecipe = true;
        }

        if(i != -1){
            select.innerHTML = '';
            let u = isRecipe ? recipeUnits[i] : units[i];

            for(let j = 0; j < u.length; j++){
                select.innerHTML += `<option value="${u[j]}">${u[j]}</option>`
            }
        }
    }

    function addIngredient(){
        let ingredientInfo = document.querySelectorAll('#add-ingredient-input input, #add-ingredient-input select');
        let n = ingredientInfo[0];
        let name = n.value;
        let isRecipe = name.indexOf('(recipe)') != -1;
        let ingredientList =  document.getElementById(isRecipe ? 'subrecipe-input' : 'ingredient-input');
        let quantityList = document.getElementById(isRecipe ? 'recipe-quantity-input' : 'quantity-input');
        let ingredientContainer = document.getElementById('add-ingredient-container');
        let q = ingredientInfo[1];
        let u = ingredientInfo[2];
        let qt = parseFloat(q.value);
        let un = u.value;
        let ingredientArr = JSON.parse(ingredientList.value);
        let quantityArr = JSON.parse(quantityList.value);
        let iNames = isRecipe ? recipeNames : names;
        let iIds = isRecipe ? recipeIds : ids;
        let i = iNames.indexOf(iNames.find(n => clean(n) == clean(name)));
        let id = iIds[i];
        let ingPrice = isRecipe ? recipePrices[i] : prices[i];
        if(id) id = parseInt(id);
        let matched = id ? ingredientArr.filter(i => i == id).length : 1;
        let token = isRecipe ? 'recipe' : 'ingredient';

        if(qt != '' && un != '' && matched == 0){
            let total;

            if(isRecipe){
                ingPrice.labor *= qt;
                ingPrice.food *= qt;
                ingPrice.misc *= qt;
                ingPrice.overhead *= qt;
                total = ingPrice.food;

                changeCost(ingPrice.labor, 'labor', true);
                changeCost(ingPrice.misc, 'misc', true);
                changeCost(ingPrice.overhead, 'overhead', true);

                ingPrice = Object.keys(ingPrice).map(k => ingPrice[k]);
            }else total = qt * ingPrice / factors[i][units[i].indexOf(un)];

            changeCost(total);

            let s = ingredientArr.pushSorted(id) - 1;
            quantityArr.pushToIndex({units: un, qt: qt}, s);

            ingredientList.setAttribute('value', JSON.stringify(ingredientArr));
            quantityList.setAttribute('value', JSON.stringify(quantityArr));

            ingredientContainer.innerHTML += `
                <p id="${token}-${id}" class="step flex-container brigade">
                    <span>${qt} ${un} ${iNames[i]}</span>
                    <i class="material-icons" onclick="removeIngredient(${id}, ${isRecipe ? "'" + JSON.stringify(ingPrice) + "'" : total}, '${name}', ${isRecipe})" style="cursor: pointer">close</i>
                </p>
            `;

            q.setAttribute('value', '');
            u.setAttribute('value', '');
            n.setAttribute('value', '');

            document.getElementById((isRecipe ? 'recipe-datalist-' : 'ingredient-datalist-') + id).remove();
        }
    }

    function removeIngredient(id, foodPrice, name, isRecipe){
        let ingredientList = document.getElementById(isRecipe ? 'subrecipe-input' : 'ingredient-input');
        let quantityList = document.getElementById(isRecipe ? 'recipe-quantity-input' : 'quantity-input');
        let token = isRecipe ? 'recipe' : 'ingredient';
        let ingredientArr = JSON.parse(ingredientList.value);
        let quantityArr = JSON.parse(quantityList.value);
        let i = ingredientArr.indexOf(id);

        if(typeof foodPrice == 'number'){
            changeCost(0 - foodPrice);
        }else{
            foodPrice = JSON.parse(foodPrice);
            changeCost(0 - foodPrice[0], 'labor', true);
            changeCost(0 - foodPrice[1], 'overhead', true);
            changeCost(0 - foodPrice[2], 'misc', true);
            changeCost(0 - foodPrice[3]);
        }

        ingredientArr.splice(i, 1);
        quantityArr.splice(i, 1);

        ingredientList.setAttribute('value', JSON.stringify(ingredientArr));
        quantityList.setAttribute('value', JSON.stringify(quantityArr));

        document.getElementById(`${token}-` + id).remove();
        document.getElementById('ingredient-datalist').innerHTML += `<option id="${token}-datalist-${id}" value="${name}">`;
    }

    function addViewer(){
        let viewerList = document.getElementById('viewer-input');
        let viewerContainer = document.getElementById('add-viewer-container');
        let v = document.getElementById('add-viewer-input');
        let username = v.value;
        let i = users.indexOf(users.find(u => clean(u) == clean(username)));
        let id = userIds[i];
        let arr = JSON.parse(viewerList.value);
        if(id) id = parseInt(id);
        let matched = id ? arr.filter(userId => userId == id) : 1;

        if(matched == 0){
            arr.push(id);

            viewerList.setAttribute('value', JSON.stringify(arr));

            viewerContainer.innerHTML += `
            <span class="allergen" id="user-${id}" style="background-color: #536DFE">
                ${username}
                <i class="material-icons" onclick="removeViewer('${id}', '${username}')" style="display: inline; cursor: pointer">close</i>
            </span>`;

            v.setAttribute('value', '');
            document.getElementById('user-datalist-' + id).remove();
        }
    }

    function removeViewer(id, username){
        let viewerList = document.getElementById('viewer-input');

        viewerList.setAttribute('value', JSON.stringify(JSON.parse(viewerList.value).filter(userId => userId != id)));

        document.getElementById('user-' + id).remove();
        document.getElementById('user-datalist').innerHTML += `<option id="user-datalist-${id}" value="${username}">`;
    }

    function deleteImg(src){
        let fileList = document.getElementById('file-list');
        let deleted = document.getElementById('deleted');

        deleted.setAttribute('value', src);
        fileList.setAttribute('value', JSON.stringify(JSON.parse(fileList.value).filter(p => p != src)));
    }

    function changeServing(){
        let servingCost = $('#serving-cost-input');
        let portionPrice = $('#portion-price');
        let portionProfit = $('#portion-profit');

        servings = parseInt($('#serving-input').val());
        if(isNaN(servings) || servings == 0) servings = 1;
        let income = price - total(cost);
        let margin = price == 0 ? 0 : 100*income/price;

        servingCost.attr('value', money(total(cost)/servings));
        portionPrice.val(money(price/servings));
        portionProfit.attr('value', money(income/servings));
    }

    function adjustMargin(){
        if(profitMargin.value < 100 && profitMargin.value >= 0){
            price = money(total(cost)/(1 - profitMargin.value/100));
            let income = money(price - total(cost));

            $('#price').attr('value', price);
            $('#portion-price').attr('value', money(price/servings));
            $('#portion-profit').attr('value', money(income/servings));
            profit.value = income;

            if(income < 0){
                profit.style.color = 'coral';
                profitMargin.style.color = 'coral';
                $('#portion-profit').css('color', 'coral');
            }else if(income == 0){
                profit.style.color = 'inherit';
                profitMargin.style.color = 'inherit';
                $('#portion-profit').css('color', 'inherit');
            }else{
                profit.style.color = '#00E676';
                profitMargin.style.color = '#00E676';
                $('#portion-profit').css('color', '#00E676');
            }
        }
    }

    let lastScale = 1;

    function mV(input, scale){
        $(input).val((scale*$(input).val()/lastScale).toFloatFixed(2));
    }

    function scaleUp(){
        let scale = parseFloat($('#recipe-scale').val());

        if(!isNaN(scale) && scale > 0){
            mV('#food-input', scale);
            mV('#labor-input', scale);
            mV('#misc-input', scale);
            mV('#total-cost-input', scale);
            mV('#profit', scale);
            mV('#price', scale);

            $('#serves').text(servings*scale);

            let parts = $('#yield').text().split('edit')[0].split(' ');
            parts[0] = parseFloat(parts[0])*scale/lastScale;
            $('#yield').text(parts.join(' '));

            $('.step').each(function(i){
                if($(this).attr('id').indexOf('ingredient') != -1 || $(this).attr('id').indexOf('recipe') != -1){
                    let ingParts = $(this).text().split(' ');

                    let k = 0;
                    while(isNaN(parseFloat(ingParts[k]))) k++;
                    ingParts[k] = scale*parseFloat(ingParts[k])/lastScale;
                    $(this).text(ingParts.join(' '));
                }
            });

            lastScale = scale;
        }
    }

</script>
